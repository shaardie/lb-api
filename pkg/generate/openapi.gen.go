// Package generate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package generate

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Config defines model for config.
type Config struct {
	Frontends []struct {
		Backend struct {
			Server *[]string `json:"server,omitempty"`
		} `json:"backend"`
		Port int `json:"port"`
	} `json:"frontends"`
}

// Error defines model for error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Loadbalancer defines model for loadbalancer.
type Loadbalancer struct {
	Config Config  `json:"config"`
	Name   *string `json:"name,omitempty"`
	Status *Status `json:"status,omitempty"`
}

// Status defines model for status.
type Status struct {
	Hostname *string `json:"hostname,omitempty"`
	Ip       *string `json:"ip,omitempty"`
}

// Name defines model for name.
type Name = string

// CreateLoadBalancerJSONBody defines parameters for CreateLoadBalancer.
type CreateLoadBalancerJSONBody = Loadbalancer

// CreateLoadBalancerJSONRequestBody defines body for CreateLoadBalancer for application/json ContentType.
type CreateLoadBalancerJSONRequestBody = CreateLoadBalancerJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /healthz)
	GetHealth(ctx echo.Context) error

	// (GET /loadbalancers)
	GetLoadbalancers(ctx echo.Context) error

	// (GET /loadbalancers/{name})
	GetLoadbalancer(ctx echo.Context, name Name) error

	// (PUT /loadbalancers/{name})
	CreateLoadBalancer(ctx echo.Context, name Name) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetLoadbalancers converts echo context to params.
func (w *ServerInterfaceWrapper) GetLoadbalancers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLoadbalancers(ctx)
	return err
}

// GetLoadbalancer converts echo context to params.
func (w *ServerInterfaceWrapper) GetLoadbalancer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name Name

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLoadbalancer(ctx, name)
	return err
}

// CreateLoadBalancer converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLoadBalancer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name Name

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateLoadBalancer(ctx, name)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/healthz", wrapper.GetHealth)
	router.GET(baseURL+"/loadbalancers", wrapper.GetLoadbalancers)
	router.GET(baseURL+"/loadbalancers/:name", wrapper.GetLoadbalancer)
	router.PUT(baseURL+"/loadbalancers/:name", wrapper.CreateLoadBalancer)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW35ObNhD+V5ht3oIBxz6nx1OTTpvc9HrJTPt2c52RxWKUA0mRFvdcD/97RwIbY4iT",
	"TjttH/IEkj7tj+/bXdgDV5VWEiVZSPegmWEVEhq/kqxC98zQciM0CSUhhTtWYaDygAoMSsWyNSuZ5Ggg",
	"BOHONaMCwu5y+wjB4MdaGMwgJVNjCJYXWDFnHJ9YpUsHvV6vOCar1Sx7yeezJc+uZut8lc+SfLFa5NfJ",
	"t8t8DSFUQt6i3FAB6TwE2ml315IRcgNN0xxs+wy4krnY+MyM0mhIoN/PjZKEMvMLQVjZMWbN+CPKbHxg",
	"0WzRDG72ScyjF9EiWqbzxeIlhI4MQuNo+S16nt4ns+uH589gFPZxgxnDdtD0G2r9ATk5hFaGBr6cixAq",
	"9iSquoJ0dXW1WHl62nVPjpCEGzTebC/EfWsxPCb6MOF0FNbp/Z7FqatojDJj9rjKcJDGMlmOIw2hQmvZ",
	"ZgiFO0XBj6qW2ZjCs9i8m97KVICD4p2I81A6zwzmkMI3cd8rcVdjcYdqwmOz/OV6Nsiyd7LcHVpjVBqW",
	"GNX2c5F0qHMeuv7r4jwam+Kj9zNkolCWxtkddqNuK+KqmipsoScb5BMCTlJxCNFBhMxVJw8x3jZExUTp",
	"DG1RflcwZjKBj5GXvxtCv2xRBm+7ExfUcKK9en8TkApajmqDATsfbKXgKC32QxF+vvkVQqiNc1wQaZvG",
	"MS+Ussg6sCMk7t5tXAmKfUMJ8jTcnjgIXr2/gRC2aGwbUBLNo8ShlUbJtIAUFlESJe1AKbwqcYGspOIP",
	"975BGs/pt/484AXyxwBlppWQrt2dtMxhbjJI4Q1SC/SVaLVy0TpjL5LEPZjWpeAeH3+wzvD+ZHiPJRzG",
	"8MMWzY4KITfBu59a4nNWl3RQECV93smlqm+HTDP2XEt80sgJs+CIaUKIT4W1n+TuDVLAyvK8DEbU3Q6s",
	"TTP4xXkevyaXEh5ENB7QIx5uhSX3tT7Pxv7/1Ij3rreai6KcXgjWu+CuHW8XhfFd0//X3E/n0ENi3+LN",
	"w9+U88tVHPPl0sqCc63/U7lC0PWEKN8bZOQmpsTfL7dLi3TCvP4HhPlYo6XXKtv9a5pcynT4e9t8rZxB",
	"ozfNnwEAAP//kskn/2gMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
